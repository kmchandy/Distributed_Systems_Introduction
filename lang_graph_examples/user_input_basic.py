import os
import ast
from openai import OpenAI
from dotenv import load_dotenv
from langchain_openai import ChatOpenAI
from langgraph.graph import StateGraph, END
from typing import TypedDict, Optional


# ---------------------------------------------
# Step 1: Set up OpenAI.
# ----------------------------------------------

# Load API key from .env file
load_dotenv()
api_key = os.getenv('OPENAI_API_KEY')

# Ensure the API key is available
if not api_key:
    raise ValueError("No API key found. Please check your .env file.")

# Create an OpenAI client
client = OpenAI(api_key=api_key)
llm = ChatOpenAI(model="gpt-3.5-turbo", temperature=0.3)


# ---------------------------------------------
# Step 2: Define the state: a TypedDict.
# ----------------------------------------------

class State(TypedDict):
    # User specifies an author, eg., Shakespeare, Poe, Obama
    author: Optional[str]
    # User specifies a topic and the author writes an essay about it.
    topic: Optional[str]
    # essay on the topic generated by the the author
    essay_output: Optional[str]
    # yes if the user approves the essay generated by the author, and no otherwise.
    essay_ok: Optional[bool]
    # User specifies the genre of the next output by the author, e.g., poem, joke, haiku
    genre: Optional[str]
    # Output generated by author in the user-specified genre
    genre_output: Optional[str]
    # yes if the user approves the output in the specified genre and no otherwise.
    genre_output_ok: Optional[bool]


# ---------------------------------------------
# Step 3: Specify the functions that are executed
# by nodes in the graph.
# The functions return a dict where the keys are
# also keys of State.
# ----------------------------------------------


def get_author_function(state: State) -> dict:
    """
    Prompt the user to describe an author who will write poems and jokes.

    """
    author = input(
        "\n What author do you want to imitate? example  Shakespeare      :")
    topic = input(
        "\n What topic should the author write about? example love     :")
    return {"author": author, "topic": topic}


def generate_essay_function(state: State) -> dict:
    """Use the LLM to generate an essay in the style of the author about the topic."""
    author = state["author"]
    topic = state['topic']
    prompt = f'''
    Write an essay in the style of {author} about {topic}.
    The essay should be at most 5 lines and in the author's 
    distinctive voice.

    '''
    result = llm.invoke(prompt)
    essay_output = result.content
    return {"essay_output": essay_output}


def check_essay_function(state: State) -> dict:
    """Ask the user if the essay is acceptable."""
    print("\n Essay:\n")
    print(state["essay_output"])
    # Get input from command line of user.
    user_input = input("\n Is the essay acceptable? (yes/no): ")
    # Normalize user input to lowercase for consistency
    user_input = user_input.strip().lower()
    return {"essay_ok": user_input == "yes"}


def get_genre_function(state: State) -> dict:
    """Prompt the user for the genre for the next output."""
    # Get input from command line of user.
    user_input = input(
        "\n Enter a genre for the next output (e.g., poem, joke, haiku):  ")
    return {"genre": user_input}


def generate_genre_output_function(state: State) -> dict:
    """Use the LLM to generate an output in the user-specified genre."""
    author = state["author"]
    genre = state['genre']
    prompt = f'''
    Write a {genre} in the style of {author}.
    The {genre} should be short and in the author's unique voice.
    '''
    result = llm.invoke(prompt)
    genre_output = result.content
    return {"genre_output": genre_output}


def check_genre_output_function(state: State) -> dict:
    """Ask the user if the genre output is acceptable."""
    print(f"\n {state['genre_output']}: \n")
    user_input = input(
        "\n Is the output in the genre ok? (yes/no):  ").strip().lower()
    return {"genre_output_ok": user_input == "yes"}


# ---------------------------------------------
# Step 4: Build the graph
# The nodes of the graph are agents that execute
# functions that read and write the state.
# ----------------------------------------------

# 4.1 Create builder
builder = StateGraph(State)

# 4.2 Add nodes to the graph.
# Give a name to the node and specify the function
# that will be executed by the node.
builder.add_node("get_author_node", get_author_function)
builder.add_node("generate_essay_node", generate_essay_function)
builder.add_node("check_essay_node", check_essay_function)
builder.add_node("get_genre_node", get_genre_function)
builder.add_node("generate_genre_output_node", generate_genre_output_function)
builder.add_node("check_genre_output_node", check_genre_output_function)


# 4.3 Define the edges between nodes of the graph.
builder.add_edge("get_author_node", "generate_essay_node")
builder.add_edge("generate_essay_node", "check_essay_node")

builder.add_conditional_edges(
    "check_essay_node",
    lambda x: "get user input for genre" if x["essay_ok"] else "generate new essay",
    {
        "get user input for genre": "get_genre_node",
        "generate new essay": "generate_essay_node"
    }
)

builder.add_edge("get_genre_node", "generate_genre_output_node")
builder.add_edge("generate_genre_output_node", "check_genre_output_node")

builder.add_conditional_edges(
    "check_genre_output_node",
    lambda x: "finished" if x["genre_output_ok"] else "try again to generate genre output",
    {
        "finished": END,
        "try again to generate genre output": "generate_genre_output_node"
    }
)

# 4.4 Specify the entry and finish points of the graph.
builder.set_entry_point("get_author_node")
# The finish point is specified by END

# 4.5 Compile the graph
graph = builder.compile()

if __name__ == "__main__":
    print("\n=== Human-in-the-Loop  ===")
    graph.invoke({})
